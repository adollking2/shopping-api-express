{
	"info": {
		"_postman_id": "1c4d7d27-bbe2-4844-b29f-feae546b1492",
		"name": "Shopping API test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23747932"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Add User with Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badUserPayloads = pm.environment.get('badUserPayloads');\r",
									"\r",
									"if (!badUserPayloads | badUserPayloads.length === 0) {\r",
									"    badUserPayloads = [\r",
									"        {},\r",
									"        { username: 1 },\r",
									"        { username: 'dicoding' },\r",
									"        { username: 'dicoding', password: true },\r",
									"        { username: 'dicoding', passowrd: 'secret' },\r",
									"        { username: 'dicoding', password: 'secret', fullname: 0 }\r",
									"    ];\r",
									"}\r",
									"\r",
									"const currentBadUserPayload = badUserPayloads.shift();\r",
									"pm.environment.set('currentBadUserPayload', JSON.stringify(currentBadUserPayload));\r",
									"pm.environment.set('badUserPayloads', badUserPayloads);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('failed');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badUserPayloads = pm.environment.get('badUserPayloads');\r",
									" \r",
									"    if(badUserPayloads && badUserPayloads.length > 0) {\r",
									"        postman.setNextRequest('Add User with Invalid Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadUserPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('respone body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.userId).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"users@mail.com\",\r\n    \"password\": \"secret121345\",\r\n    \"name\": \"Users Markets\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('respone body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.userId).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"users2@mail.com\",\r\n    \"password\": \"secret121345\",\r\n    \"name\": \"Users2 Markets\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/users",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentications",
			"item": [
				{
					"name": "Login User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
									"    pm.expect(responseJson.data.refreshToken).to.be.a('string');\r",
									"    \r",
									"    pm.environment.set('accessTokenUser1', responseJson.data.accessToken);\r",
									"    pm.environment.set('refreshTokenUser1', responseJson.data.refreshToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"users@mail.com\",\r\n    \"password\": \"secret121345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
									"    pm.expect(responseJson.data.refreshToken).to.be.a('string');\r",
									"    \r",
									"    pm.environment.set('accessTokenUser2', responseJson.data.accessToken);\r",
									"    pm.environment.set('refreshTokenUser2', responseJson.data.refreshToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"users2@mail.com\",\r\n    \"password\": \"secret121345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Auth with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('failed');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Auth with Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('failed');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"xxxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Auth with User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshTokenUser1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Auth with User 2 using token User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('failed');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{accessTokenUser1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshTokenUser1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Auth with User 2 using token User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('failed');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{accessTokenUser1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Authentication with Deleted Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('failed');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshTokenUser1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/authentications",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get Products Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.products).to.be.an('array');\r",
									"    pm.expect(responseJson.data.products).to.length(20);\r",
									"\r",
									"    const { products } = responseJson.data;\r",
									"    products.forEach((products) => {\r",
									"        pm.expect(Object.keys(products)).to.length(7);\r",
									"        pm.expect(products.id).to.be.ok;\r",
									"        pm.expect(products.title).to.be.ok;\r",
									"        pm.expect(products.price).to.be.ok;\r",
									"        pm.expect(products.description).to.be.ok;\r",
									"        pm.expect(products.category).to.be.ok;\r",
									"        pm.expect(products.image).to.be.ok;\r",
									"        pm.expect(products.rating).to.be.ok;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/products",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products Data By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.product).to.be.an('array');\r",
									"    pm.expect(responseJson.data.product).to.length(1);\r",
									"\r",
									"    const { product } = responseJson.data;\r",
									"    product.forEach((product) => {\r",
									"        pm.expect(Object.keys(product)).to.length(7);\r",
									"        pm.expect(product.id).to.be.ok;\r",
									"        pm.expect(product.title).to.be.ok;\r",
									"        pm.expect(product.price).to.be.ok;\r",
									"        pm.expect(product.description).to.be.ok;\r",
									"        pm.expect(product.category).to.be.ok;\r",
									"        pm.expect(product.image).to.be.ok;\r",
									"        pm.expect(product.rating).to.be.ok;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/products/1",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Cart",
			"item": [
				{
					"name": "Get User Cart Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.userCart).to.be.an('array');\r",
									"    pm.expect(responseJson.data.userCart).to.length(1);\r",
									"\r",
									"    const { userCart } = responseJson.data;\r",
									"    userCart.forEach((userCart) => {\r",
									"        pm.expect(Object.keys(userCart)).to.length(2);\r",
									"        pm.expect(userCart.userCartId).to.be.ok;\r",
									"        pm.expect(userCart.cart).to.be.ok;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshTokenUser1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/cart",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Item To User Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.userCart).to.be.an('array');\r",
									"    pm.expect(responseJson.data.userCart).to.length(1);\r",
									"\r",
									"    const { userCart } = responseJson.data;\r",
									"    userCart.forEach((userCart) => {\r",
									"        pm.expect(Object.keys(userCart)).to.length(2);\r",
									"        pm.expect(userCart.userCartId).to.be.ok;\r",
									"        pm.expect(userCart.cart).to.be.ok;\r",
									"        pm.expect(Object.keys(userCart.cart)).to.length(1);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshTokenUser1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/products/1",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item From User Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenUser1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshTokenUser1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/products/1",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}